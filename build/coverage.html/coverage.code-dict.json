{"/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/test.js":"/* istanbul instrument in package npmtest_grunt_closure_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/lib.npmtest_grunt_closure_tools.js":"/* istanbul instrument in package npmtest_grunt_closure_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_closure_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_closure_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-closure-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_closure_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_closure_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_closure_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_closure_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_closure_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_closure_tools.__dirname + '/lib.npmtest_grunt_closure_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/node_modules/grunt-closure-tools/tasks/closureTools.js":"/**\n * Bootstrap file\n *\n */\n\nvar localGrunt = require('grunt');\n\nvar taskLib = require('task-closure-tools');\n\nvar cHelpers = taskLib.helpers;\nvar cBuilder = require('./closureBuilder');\nvar cCompiler = require('./closureCompiler');\nvar cDepsWriter = require('./closureDepsWriter');\n\nvar cTools = module.exports = function(grunt) {\n\n  // register the rest of the tasks\n  cBuilder(grunt);\n  cCompiler(grunt);\n  cDepsWriter(grunt);\n\n};\n\n// overwrite helper's logging methods\ncHelpers.log = {\n  warn: function(msg) { localGrunt.log.warn(msg); },\n  info: function(msg) { localGrunt.log.writeln(msg); },\n  error: function(msg) { localGrunt.log.error(msg); },\n  debug: function(debug, msg) {\n    if ( !debug ) return;\n    localGrunt.log.writeln( 'debug :: '.blue + msg );\n  }\n};\n\n\n// Expose internal API\ncTools.helpers = taskLib.helpers;\ncTools.builder = taskLib.builder;\ncTools.compiler = taskLib.compiler;\ncTools.depsWriter = taskLib.depsWriter;\ncTools.closureOpts = taskLib.closureOpts;\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/node_modules/grunt-closure-tools/tasks/closureBuilder.js":"/*jshint camelcase:false */\n/**\n * Copyright 2012 Thanasis Polychronakis.\n *\n * =======================\n *\n * closureBuilder.js Combines and optionally compiles javascript files\n *\n */\n\nvar taskLib = require('task-closure-tools');\nvar cBuilder = taskLib.builder;\nvar cHelpers = taskLib.helpers;\n\nmodule.exports = function( grunt ) {\n\n  grunt.registerMultiTask('closureBuilder', 'Google Closure Library builder', function closureBuilder() {\n\n    var builderDone = this.async();\n    var options = this.options();\n\n    //\n    // Validations\n    // - Check required parameters\n    //\n    if ( !cBuilder.validate( options )) {\n      grunt.log.error( 'FAILED to run closureBuilder task.');\n      return;\n    }\n    //\n    // Prepare and compile the command string we will execute\n    //\n    // Iterate over all specified file groups.\n    var commands = [], cmd,\n        targetName = this.target;\n\n    this.files.forEach(function(fileObj) {\n\n\n      if ( !cBuilder.validateFileObj( options, fileObj )) {\n        grunt.log.error('FAILED validations for target: ' + targetName.red);\n        return;\n      }\n\n      cmd = cBuilder.createCommand( options, fileObj );\n\n      if ( cmd ) {\n        commands.push( {cmd: cmd, dest: targetName, fileObj: fileObj} );\n      } else {\n        grunt.log.error( 'FAILED to create command line for target: ' + targetName.red );\n      }\n    });\n\n\n    if ( 0 === commands.length ) {\n      grunt.log.error('No commands produced for shell execution. Check your config file');\n      builderDone(false);\n      return;\n    }\n\n    //\n    // Execute the compile command on the shell.\n    //\n    //\n    cHelpers.runCommands( Array.prototype.slice.call(commands, 0), function(state) {\n      if ( !state ) {\n        builderDone(false);\n        return;\n      }\n      cHelpers.runStats( Array.prototype.slice.call(commands, 0), options, builderDone);\n    }, false, options.execOpts);\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/node_modules/grunt-closure-tools/tasks/closureCompiler.js":"/*jshint camelcase:false */\n\n/**\n * Copyright 2012 Thanasis Polychronakis. Some Rights Reserved.\n *\n * =======================\n *\n * closureCompiler.js Combines and optionally compiles javascript files\n *\n */\n\n/**\n * The closureCompiler grunt task\n *\n */\n\nvar taskLib = require('task-closure-tools');\nvar cCompiler = taskLib.compiler;\nvar cHelpers = taskLib.helpers;\n\nmodule.exports = function( grunt ) {\n  grunt.registerMultiTask('closureCompiler', 'Google Closure Library compiler', function() {\n    // Tell grunt this task is asynchronous.\n    var compileDone = this.async();\n\n    var options = this.options();\n    if ( !cCompiler.validateOpts( options ) ) {\n      grunt.log.error('closureCompiler Task Failed :: Options');\n      return;\n    }\n\n    // Iterate over all specified file groups.\n    var commands = [], cmd,\n        targetName = this.target;\n\n    var isMapping = this.files.length > 1;\n    var genSourceMap = (options.compilerOpts && options.compilerOpts.create_source_map === null);\n    this.files.forEach(function(fileObj) {\n      if ( !cCompiler.validateFile( fileObj ) ) {\n        grunt.log.error('closureCompiler Task Failed :: File');\n        return;\n      }\n      // for file mappings overwrite the source_map filename with 'dest' name + '.map' suffix\n      if (isMapping && genSourceMap) {\n        options.compilerOpts.create_source_map = fileObj.dest + '.map';\n      }\n\n      cmd = cCompiler.compileCommand( options, fileObj );\n\n      if ( cmd ) {\n        commands.push( {cmd: cmd, dest: targetName} );\n      } else if (!options.checkModified) {\n        grunt.log.error( 'FAILED to create command line for target: ' + targetName.red );\n      }\n    });\n\n    if ( 0 === commands.length ) {\n      if (options.checkModified) {\n        compileDone(true);\n        return;\n      }\n      grunt.log.error('No commands produced for shell execution. Check your config file');\n      compileDone(false);\n      return;\n    }\n    // release the kraken!\n    cHelpers.runCommands( commands, compileDone, false, options.execOpts );\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/node_modules/grunt-closure-tools/tasks/closureDepsWriter.js":"/**\n * Copyright 2012 Thanasis Polychronakis. Some Rights Reserved.\n *\n * =======================\n *\n * closureBuilder.js Combines and optionally compiles javascript files\n *\n */\n\nvar taskLib = require('task-closure-tools');\nvar cDepsWriter = taskLib.depsWriter;\nvar cHelpers = taskLib.helpers;\n\nmodule.exports = function(grunt) {\n  grunt.registerMultiTask('closureDepsWriter', 'Google Closure Library Dependency Calculator script', function() {\n\n    // Tell grunt this task is asynchronous.\n    var compileDone = this.async();\n\n    var options = this.options();\n\n    if ( !cDepsWriter.validate( options ) ) {\n      grunt.log.error('closureDepsWriter Task Failed');\n      return;\n    }\n\n    // Iterate over all specified file groups.\n    var commands = [], cmd,\n        targetName = this.target,\n        hadFile = false;\n\n    function createCommand( fileObj ) {\n      hadFile = true;\n      cmd = cDepsWriter.createCommand( options, fileObj );\n\n      if ( cmd ) {\n        commands.push( {cmd: cmd, dest: targetName} );\n      } else {\n        grunt.log.error( 'FAILED to create command line for target: ' + targetName.red );\n      }\n    }\n\n    this.files.forEach( createCommand );\n\n    if ( !hadFile ) {\n      createCommand( {} );\n    }\n\n    if ( 0 === commands.length ) {\n      grunt.log.error('No commands produced for shell execution. Check your config file');\n      compileDone(false);\n      return;\n    }\n\n    // release the kraken!\n    cHelpers.runCommands( commands, compileDone, false, options.execOpts );\n\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-closure-tools/node_modules/grunt-closure-tools/Gruntfile.js":"/*jshint camelcase:false */\n/*\n * Grunt Closure Tools\n * https://github.com/closureplease/grunt-closure-tools\n *\n * Copyright (c) 2013 Thanasis Polychronakis\n * Licensed under the MIT license.\n */\n\n\nvar closureTools  = require('./tasks/closureTools'),\n    ssCompiler    = require('superstartup-closure-compiler'),\n    cTools        = require('closure-tools');\n\n\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-release');\n\n  // initialize the tasks manually.\n  closureTools(grunt);\n\n  // Project configuration.\n  grunt.initConfig({\n\n    closureDepsWriter: {\n      options: {\n        depswriter: cTools.getPath( 'build/depswriter.py' ),\n        root: 'test/case/'\n      },\n      testCase: {\n        dest: 'temp/deps.js'\n      }\n    },\n    closureBuilder:  {\n      options: {\n        builder: cTools.getPath('build/closurebuilder.py'),\n        // This is required if you set the option \"compile\" to true.\n        compilerFile: ssCompiler.getPathSS(),\n        inputs: 'test/case/js/app.js'\n\n      },\n\n      // any name that describes your operation\n      testCaseBundle: {\n        options: {\n          output_mode: 'script',\n          compile: false // boolean\n        },\n        src: ['test/case/js/', 'test/case/closureMock'],\n        dest: 'temp/build.bundled.js'\n      },\n      testCaseCompile: {\n        options: {\n          output_mode: 'compile',\n          compile: true,\n          compilerOpts: {\n            compilation_level: 'ADVANCED_OPTIMIZATIONS',\n            warning_level: 'verbose',\n            externs: 'test/case/externs.js',\n            summary_detail_level: 3,\n            output_wrapper: '(function(){%output%}).call(this);'\n          }\n        },\n        src: ['test/case/js/', 'test/case/closureMock'],\n        dest: 'temp/build.compiled.js'\n      }\n    },\n    closureCompiler: {\n      options: {\n        compilerFile: ssCompiler.getPathSS(),\n        compilerOpts: {\n          compilation_level: 'ADVANCED_OPTIMIZATIONS',\n          warning_level: 'verbose',\n          externs: 'test/case/externs.js',\n          summary_detail_level: 3,\n          output_wrapper: '\"(function(){%output%}).call(this);\"'\n        }\n      },\n      testCase: {\n        src: 'temp/build.bundled.js',\n        dest: 'temp/compiler.compiled.js'\n      },\n      testCaseNoSrc: {\n        dest: 'temp/compiler.compiled.js'\n      }\n\n    },\n    release: {\n      options: {\n        bump: true, //default: true\n        file: 'package.json', //default: package.json\n        add: true, //default: true\n        commit: true, //default: true\n        tag: true, //default: true\n        push: true, //default: true\n        pushTags: true, //default: true\n        npm: true, //default: true\n        tagName: 'v<%= version %>', //default: '<%= version %>'\n        commitMessage: 'releasing v<%= version %>', //default: 'release <%= version %>'\n        tagMessage: 'v<%= version %>' //default: 'Version <%= version %>'\n      }\n    },\n    watch: {\n      test: {\n        files: [\n          'test/{builder,compiler,depsWriter}/**/*.js',\n          'tasks/**/*.js'\n        ],\n        tasks: ['test']\n      },\n      builder: {\n        files: ['tasks/*.js'],\n        tasks: ['closureBuilder:readyjs']\n      },\n      depsWriter: {\n        files: ['tasks/*.js'],\n        tasks: ['closureDepsWriter:todoApp']\n      }\n    },\n    nodeunit: {\n      all: [\n        // all lib tests\n        'test/{builder,compiler,depsWriter}/**/*.js',\n        // grunt task tests\n        'test/*.js'\n      ]\n    }\n  });\n\n  // \"npm test\" runs these tasks,\n  // run all the build tasks first.\n  grunt.registerTask( 'test', [\n    'closureDepsWriter:testCase',\n    'closureBuilder:testCaseBundle',\n    'closureBuilder:testCaseCompile',\n    'closureCompiler:testCase',\n    // not ready yet\n    //'closureCompiler:testCaseNoSrc',\n    'nodeunit'\n  ]);\n\n  grunt.registerTask('default', ['test']);\n\n};\n"}